@startuml 
title C4 - Level 4

enum BookStatus {
    DISPONIBLE: "Disponible"
    PRESTADO: "Prestado"
}
class Book_Model {
    - id: str
    - titulo: str
    - autor: str 
    - tipo: str 
    - fecha_agregado: datetime
    - estado: BookStatus
    - total_prestamos: int : 0

    - __post_init__() : void
    + prestar() : bool
    + devolver() : bool
    + esta_disponible() : bool
    + coincide_titulo(titulo: str) : bool
    + coincide_autor(autor: str) : bool
    + to_dict() : dict
    + from_dict(data: dict) : Book_Model
    + __str__() : str
}

enum loanStatus {
    ACTIVO = "activo"
    DEVUELTO = "devuelto"
    VENCIDO = "vencido"
}

class Loan_Model {
    - id: str
    - libro_id: str
    - titulo: str
    - persona: str : 'un amigo'
    - fecha_prestamo: Optional[datetime] 
    - fecha_limite: Optional[datetime] 
    - fecha_devolucion: Optional[datetime]
    - estado: LoanStatus
    - dias_prestamo: int : 7

    - __post_init__() : void
    + devolver() : bool
    + esta_vencido() : bool
    + dias_restante() : int
    + fue_devuelto_a_tiempo() : bool
    + actualizar_estado() : void
    + coincide_titulo(titulo: str) : bool
    + to_dict() : dict
    + from_dict(data: dict) : Loan_Model
    + __str__() : str
}

' ==== Interfaces ====
interface IDataAdapter {
  + get_attributes(request_envelope) : Dict[str, Any]
  + save_attributes(request_envelope, attributes: Dict[str, Any]) : None
  + delete_attributes(request_envelope) : None
}

interface IBookRepository {
  + find_all(user_id: str) : List<Book>
  + find_by_id(user_id: str, book_id: str) : Optional<Book>
  + find_by_title(user_id: str, title: str) : List<Book>
  + find_by_author(user_id: str, author: str) : List<Book>
  + save(user_id: str, book: Book) : None
  + delete(user_id: str, book_id: str) : bool
  + exists_title(user_id: str, title: str) : bool
}

interface ILoanRepository {
  + find_active_loans(user_id: str) : List<Loan>
  + find_loan_history(user_id: str) : List<Loan>
  + find_by_book_id(user_id: str, book_id: str) : Optional<Loan>
  + find_by_title(user_id: str, title: str) : Optional<Loan>
  + save_loan(user_id: str, loan: Loan) : None
  + complete_loan(user_id: str, loan_id: str) : bool
}

interface ICacheService {
  + get(key: str) : Optional<Dict[str, Any]>
  + set(key: str, data: Dict[str, Any], ttl_seconds: int = 3600) : None
  + delete(key: str) : None
  + clear_all() : None
}

' ==== Relaciones ====
IBookRepository --> Book_Model
ILoanRepository --> Loan_Model

@enduml